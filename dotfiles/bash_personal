# -*- sh -*-  Personal bash settings
# Put this at the end of your .bashrc or .bash_profile file
# # Source personal definitions
# if [ -f ~/.bash_personal ]; then
#         . ~/.bash_personal
# fi


############################################################################


# Useful aliases
alias ll='ls -lh'
alias la='ls -A'
alias l='ls -CF'
alias lll='ls -ltrh'
alias unmount='umount -a -t cifs -l'

# IPython
alias ipq='ipython qtconsole --style=ipython --pylab'
alias ipqi='ipython qtconsole --style=ipython --pylab inline'
alias ipt='ipython -pylab'
alias iptn='ipython'

# onedrive
# https://github.com/skilion/onedrive
alias onedrive_restart='systemctl --user restart onedrive'
alias onedrive_stop='systemctl --user stop onedrive'
alias onedrive_view='journalctl --user-unit onedrive -f'

# UCL VPN
alias uclvpn="sudo openconnect vpn.ucl.ac.uk --csd-wrapper=~/openconnect_wrapper.sh"

# Software
alias fiji=$HOME'/src/Fiji.app/ImageJ-linux64'
alias matlabn='matlab -nojvm -nosplash'
alias emacsn='emacs -nw'
alias texbuild='pdflatex --shell-escape --interaction=nonstopmode'

# alignment software
export FREESURFER_HOME='/opt/freesurfer'
alias load_freesurfer='source /opt/freesurfer/FreeSurferEnv.sh'
alias load_fsl='source /etc/fsl/fsl.sh'
export PATH=${PATH}:$HOME/'repos/elastixbuild'


##############################
# Setup zeromq for ipython qt
##############################
# git clone https://github.com/zeromq/zeromq2-x.git
# sudo apt-get install libtool
# sudo apt-get install uuid-dev

# ./autogen.sh
# ./configure
# make
# sudo make install

# git clone https://github.com/zeromq/pyzmq.git
# sudo python setup.py install



##############################
# MKL Build: Nov 2020
##############################
# parallel studio
source /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64
# https://software.intel.com/content/www/us/en/develop/articles/build-numpy-with-mkl-and-icc.html
#
# ----NUMPY INSTALL from source
# git clean -xfd # clean repo
# create site.cfg
# sudo su
# source /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64
# python3 setup.py config --compiler=intelem build_clib --compiler=intelem build_ext --compiler=intelem install
# ----Scipy Install
# python3 setup.py config --compiler=intelem --fcompiler=intelem build_clib --compiler=intelem --fcompiler=intelem build_ext --compiler=intelem --fcompiler=intelem install

# Add the Intel libraries to the path
#export LD_LIBRARY_PATH=/opt/intel/composer_xe_2011_sp1.7.256/mkl/lib/intel64:/opt/intel/composer_xe_2011_sp1.7.256/compiler/lib/intel64:$LD_LIBRARY_PATH

##############################
# Setup local built R
##############################

# Add the R libraries (from the build) to use with RPy
export LD_LIBRARY_PATH=/usr/local/lib/R/lib:$LD_LIBRARY_PATH

# update ubuntu
alias apt-up='sudo apt-get update;sudo apt-get -y --force-yes dselect-upgrade'

############################################################################
#
# Load basic bash utilities (handy functions and constants)
#
. $HOME/.bash_utils

############################################################################
#
# Configure paths, using the path generation functions in .bash_utils
#
# These are the prefixes I typically use as --prefix options for installation
# of packages.  There's a method to the madness of having several of them, and
# in this order.  The ones at the top end up first in the generated path specs,
# so they take precedence.
pfx="$pfx $HOME/tmp/junk"  # quick and dirty testing
pfx="$pfx $HOME/tmp/local"  # temporary, stable testing
pfx="$pfx $HOME/usr"  # codes *I* have written
pfx="$pfx $HOME/usr/opt"  # I don't sync this across computers
pfx="$pfx $HOME/usr/local"  # default prefix for third-party installs
pfx="$pfx /local"  # used in some machines I work on
pfx="$pfx /opt"  # vendor directory for commercial stuff

# Initialize $PATH with sbin locations so I can find system tools
export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH

# Now, set all common paths based on the prefix list just built.  The
# export_paths function ensures that all commonly needed paths get correctly
# set and exported to the environment.
export_paths "$pfx"

# Make 2.4 and 2.5 specific ones, so it's easy to switch with a simple alias
PYTHONPATH24=`mk_pythonpath "$pfx" 2.4`
PYTHONPATH25=`mk_pythonpath "$pfx" 2.5`
PYTHONPATH26=`mk_pythonpath "$pfx" 2.6`

# Search paths for LaTeX (Dont' forget the final colons.  The null entry `::'
# denotes `default system directories' -- try finding that in the
# documentation.)  Note that these *must* go under ~/texmf, because that
# particular path is hardcoded in LaTeX and is not overridable by the user.
# While one could keep ~/texmf for default package installs and use other
# locations for {tex/bib/bst}inputs, I prefer to centralize all Tex stuff in
# one place.  Since I can't do it in ~/usr/tex, then I'll just keep everything
# TeX related in ~/texmf
export TEXINPUTS=.:$HOME/texmf/texinputs::
export BIBINPUTS=.:$HOME/texmf/bibinputs::
export BSTINPUTS=.:$HOME/texmf/bstinputs::

############################################################################

#export MATLABPATH=$HOME/matlab:$HOME/matlab/m2html

# default installation location variable for convenience
export IPREFIX=$HOME/usr/local

# git completion
. $HOME/.git-completion
PS1='[\[\033[1;30m\]\u\[\033[1;31m\]@\h \[\033[1;34m\]\w\[\033[1;33m\]$(__git_ps1 " (%s)")\[\033[0m\]] '
