;; Add .emacs.d to the load path
(add-to-list 'load-path "~/.emacs.d")

;; R mode
(add-to-list 'load-path "~/.emacs.d/ess-5.11/lisp") ;; R highlighting
(require 'ess-site) ;; 

;; ----------- 
;; python mode
;; -----------
;; TODO - integration with ipython 
(require 'python)
;; (require 'ipython)
;; (setq py-python-command-args '("--pylab" "--colors" "Linux"))
(require 'auto-complete)

;; --------------------
;; auto-complete setup
;; --------------------
;;
;;
;; ----- autocomplete - in dotfiles/emacs.d/emacs.d
;; http://www.youtube.com/watch?v=rGVVnDxwJYE !!!
;; Download: http://cx4a.org/software/auto-complete/#Latest_Stable
;; Install: M-x load-file; auto-complete/etc/install.el
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d//ac-dict")
(ac-config-default)

;; ----- yasnippet - in dotfiles/emacs.d/emacs.d
(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet/snippets")


(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))

;; -----pymacs - must be installed in system
;; http://pymacs.progiciels-bpi.ca/pymacs.html
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)

;; -----Rope and emacs
;; Requires:
;;      rope and ropemode
;;      http://pypi.python.org/pypi/rope
;;      http://pypi.python.org/pypi/ropemode
;; 
;; Download http://pypi.python.org/pypi/ropemacs
;;          or http://bitbucket.org/agr/ropemacs/get/tip.gz

;; ----- Integrate pymacs and rope
;; http://www.enigmacurry.com/2009/01/21/autocompleteel-python-code-completion-in-emacs/
;; Initialize Rope
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)
(setq yas/trigger-key (kbd "C-c <kp-multiply>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Auto-completion
;;;  Integrates:   
;;;   1) Rope
;;;   2) Yasnippet
;;;   all with AutoComplete.el
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun prefix-list-elements (list prefix)
  (let (value)
    (nreverse
     (dolist (element list value)
       (setq value (cons (format "%s%s" prefix element) value))))))
(defvar ac-source-rope
  '((candidates
     . (lambda ()
         (prefix-list-elements (rope-completions) ac-target))))
  "Source for Rope")
(defun ac-python-find ()
  "Python `ac-find-function'."
  (require 'thingatpt)
  (let ((symbol (car-safe (bounds-of-thing-at-point 'symbol))))
    (if (null symbol)
        (if (string= "." (buffer-substring (- (point) 1) (point)))
            (point)
          nil)
      symbol)))
(defun ac-python-candidate ()
  "Python `ac-candidates-function'"
  (let (candidates)
    (dolist (source ac-sources)
      (if (symbolp source)
          (setq source (symbol-value source)))
      (let* ((ac-limit (or (cdr-safe (assq 'limit source)) ac-limit))
             (requires (cdr-safe (assq 'requires source)))
             cand)
        (if (or (null requires)
                (>= (length ac-target) requires))
            (setq cand
                  (delq nil
                        (mapcar (lambda (candidate)
                                  (propertize candidate 'source source))
                                (funcall (cdr (assq 'candidates source)))))))
        (if (and (> ac-limit 1)
                 (> (length cand) ac-limit))
            (setcdr (nthcdr (1- ac-limit) cand) nil))
        (setq candidates (append candidates cand))))
    (delete-dups candidates)))
(add-hook 'python-mode-hook
          (lambda ()
	    (auto-complete-mode 1)
	    (set (make-local-variable 'ac-sources)
		 (append ac-sources '(ac-source-rope) '(ac-source-yasnippet)))
	    (set (make-local-variable 'ac-find-function) 'ac-python-find)
	    (set (make-local-variable 'ac-candidate-function) 'ac-python-candidate)
	    (set (make-local-variable 'ac-auto-start) nil)))



(defun ryan-python-tab ()
  (interactive)
  (if (eql (ac-start) nil)
      (indent-for-tab-command)))

(defadvice ac-start (before advice-turn-on-auto-start activate)
  (set (make-local-variable 'ac-auto-start) t))
(defadvice ac-cleanup (after advice-turn-off-auto-start activate)
  (set (make-local-variable 'ac-auto-start) nil))

(define-key python-mode-map "\t" 'ryan-python-tab)
;; (define-key python-mode-map (kbd "<C-tab>") 'ryan-python-tab)


;; End Auto Completion



;; ----------- 
;; matlab mode
;; ----------- 
;; Set up matlab-mode to load on .m files
(autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
(setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
(autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)

;; face function
(defun what-face (pos)
  (interactive "d")
  (let ((face (or (get-char-property (point) 'read-face-name)
                  (get-char-property (point) 'face))))
    (if face (message "Face: %s" face) (message "No face at %d" pos))))

;; Emacs looks
(set-cursor-color "red")
(set-background-color "black")
(set-foreground-color "white")

(custom-set-variables
 '(inhibit-startup-screen t)
 '(inverse-video t)
 '(safe-local-variable-values (quote ((py-indent-offset . 4)))))
;; font
(custom-set-faces
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 86 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))
