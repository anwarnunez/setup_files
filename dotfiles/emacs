;; Add .emacs.d to the load path
(add-to-list 'load-path "~/.emacs.d")

;; --------------------
;; python3 setup
;; --------------------

(require 'python)
(setq python-shell-interpreter "ipython3"
      python-shell-interpreter-args "--pylab --colors=Linux --simple-prompt -i")

;; py-execute-region
;; line-move-visual
;;;; `Cython' mode.
(add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
(define-derived-mode cython-mode python-mode "Cython"
  (font-lock-add-keywords
   nil
   `((,(concat "\\<\\(NULL"
	       "\\|c\\(def\\|har\\|typedef\\)"
	       "\\|e\\(num\\|xtern\\)"
	       "\\|float"
	       "\\|in\\(clude\\|t\\)"
	       "\\|object\\|public\\|struct\\|type\\|union\\|void"
	       "\\)\\>")
      1 font-lock-keyword-face t))))



;; --------------------
;; auto-complete setup
;; --------------------
;;
;; ----- autocomplete - in dotfiles/emacs.d/e
;; http://www.youtube.com/watch?v=rGVVnDxwJYE !!!
;; Download: http://cx4a.org/software/auto-complete/#Latest_Stable
;; Install: M-x load-file; auto-complete/etc/install.el
(require 'auto-complete)
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
;; (autoload 'python-mode "python-mode" "Python Mode." t)
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))


;; --------------------------------------------
;; Pnw-mode for Pweave reST documents
;; from: http://mpastell.com/pweave/emacs.html
;; --------------------------------------------
;; RST
(defun Pnw-mode ()
       (require 'noweb-font-lock-mode)
       (noweb-mode)
       (setq noweb-default-code-mode 'python-mode)
       (setq noweb-doc-mode 'rst-mode))
(setq auto-mode-alist (append (list (cons "\\.Pnw$" 'Pnw-mode))
		   auto-mode-alist))


(defun ppy-mode ()
       (require 'noweb-font-lock-mode)
       (noweb-mode)
       (setq noweb-default-code-mode 'python-mode)
       (setq noweb-doc-mode 'python-mode))
(setq auto-mode-alist (append (list (cons "\\.ppy$" 'ppy-mode))
		   auto-mode-alist))


;; Latex
(defun Plw-mode ()
       (require 'noweb-font-lock-mode)
       (noweb-mode)
       (setq noweb-default-code-mode 'python-mode)
       (setq noweb-doc-mode 'latex-mode))

(setq auto-mode-alist (append (list (cons "\\.Plw$" 'Plw-mode))
		   auto-mode-alist))

;; -----------
;; matlab mode
;; -----------
;; Set up matlab-mode to load on .m files
(autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
(setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
(autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)

;; face function
(defun what-face (pos)
  (interactive "d")
  (let ((face (or (get-char-property (point) 'read-face-name)
		  (get-char-property (point) 'face))))
    (if face (message "Face: %s" face) (message "No face at %d" pos))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Buffer switching
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; http://www.emacswiki.org/emacs/ControlTABbufferCycling
; necessary support function for buffer burial
(defun crs-delete-these (delete-these from-this-list)
  "Delete DELETE-THESE FROM-THIS-LIST."
  (cond
   ((car delete-these)
    (if (member (car delete-these) from-this-list)
	(crs-delete-these (cdr delete-these) (delete (car delete-these)
						     from-this-list))
      (crs-delete-these (cdr delete-these) from-this-list)))
   (t from-this-list)))

; this is the list of buffers I never want to see
(defvar crs-hated-buffers
  '("KILL" "*Compile-Log*" "*hello*" "*scratch*" "*Messages*" "*ESS*" "*Buffer List*" "*Completions*" "**IPython Completions*" "*Directory*"))

; might as well use this for both
(setq iswitchb-buffer-ignore (append '("^ " "*Buffer") crs-hated-buffers))
(defun crs-hated-buffers ()
  "List of buffers I never want to see, converted from names to buffers."
  (delete nil
	  (append
	   (mapcar 'get-buffer crs-hated-buffers)
	   (mapcar (lambda (this-buffer)
		     (if (string-match "^ " (buffer-name this-buffer))
			 this-buffer))
		   (buffer-list)))))

; I'm sick of switching buffers only to find KILL right in front of me
(defun crs-bury-buffer (&optional n)
  (interactive)
  (unless n
    (setq n 1))
  (let ((my-buffer-list (crs-delete-these (crs-hated-buffers)
					  (buffer-list (selected-frame)))))
    (switch-to-buffer
     (if (< n 0)
	 (nth (+ (length my-buffer-list) n)
	      my-buffer-list)
       (bury-buffer)
       (nth n my-buffer-list)))))

(global-set-key (read-kbd-macro "<C-next>") 'crs-bury-buffer)
(global-set-key (read-kbd-macro "<C-prior>") (lambda ()
					    (interactive)
					    (crs-bury-buffer -1)))

(global-set-key (kbd "<C-tab>") 'next-multiframe-window)
(global-set-key (kbd "<C-S-iso-lefttab>") 'previous-multiframe-window)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Aesthetics
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set-cursor-color "red")
(set-background-color "black")
(set-foreground-color "white")
(defun set-my-frame-options ()
  "Set frame color so I can distinguish between two sessions."
  (interactive)
  (setq my-bgcolor "black")
  (setq default-frame-alist
	(append default-frame-alist
		'((foreground-color . "white")
		  (background-color . "black")
		  (cursor-color . "red")
		  )
		)
	)
  (set-background-color my-bgcolor)
  )

;; Emacs looks - for all frames!
(setq default-frame-alist
      (append default-frame-alist
       '((foreground-color . "white")
	 (background-color . "black")
	 (cursor-color . "red")
)))

(global-set-key [f10] 'set-my-frame-options)

(setq max-lisp-eval-depth 1000)
(setq max-specpdl-size 1000)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(doc-view-continuous t)
 '(inhibit-startup-screen t)
 '(inverse-video t)
 '(safe-local-variable-values (quote ((py-indent-offset . 4))))
 '(send-mail-function (quote smtpmail-send-it)))

;; ;; font
;; (custom-set-faces
;;   ;; custom-set-faces was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 86 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 113 :width normal :foundry "PfEd" :family "DejaVu Sans Mono")))))

;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 143 :width normal :foundry "PfEd" :family "DejaVu Sans")))))

(add-hook 'before-save-hook 'whitespace-cleanup)
